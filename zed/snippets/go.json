{
    "YAML annotation": {
        "prefix": "yaml",
        "body": ["`yaml:\"$0\"`"],
        "description": "Puts the yaml annotation after a struct field declaration"
    },
    "YAML omitempty annotation": {
        "prefix": "yaml_omitempty",
        "body": ["`yaml:\"$0,omitempty\"`"],
        "description": "Puts the yaml annotation after a struct field declaration"
    },
    "JSON annotation": {
        "prefix": "json",
        "body": ["`json:\"$0,omitempty\"`"]
    },
    "JSON ommitempty annotation": {
        "prefix": "json_omitempty",
        "body": ["`json:\"$0,omitempty\"`"]
    },
    "Test Stub": {
        "prefix": "testfunc",
        "body": [
            "func Test$0(t *testing.T) {",
            "    tests := []struct {",
            "        dummy  string",
            "        checkFunc  func(data any) bool",
            "    }{",
            "        {",
            "            dummy:  \"xxxx\",",
            "            checkFunc: func(data any) bool {",
            "                fmt.Println(\"data\", data)",
            "                return false // TODO",
            "            },",
            "        },",
            "    }",
            "",
            "    for _, test := range tests {",
            "        // TODO things",
            "        s := \"dummy\"",
            "        require.True(t, test.checkFunc(s))",
            "    }",
            "}",
            ""
        ]
    },
    "Requires Equal": {
        "prefix": "requiresEqual",
        "body": ["require.Equal(t, ${1:expected}, ${2:actual}, ${3:message})"],
        "description": "insert requires.Equal line"
    },
    "Handle Error And Return": {
        "prefix": "handleErrorAndReturn",
        "body": [
            "if err != nil {",
            "    return fmt.Errorf(\"Error while $1: \\$v\", err)",
            "}"
        ],
        "description": "Handles err and returns a combined error"
    }
}
